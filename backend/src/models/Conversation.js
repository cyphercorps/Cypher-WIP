const admin = require('firebase-admin');

// Firestore Structure for Conversations
const conversationSchema = {
  conversationId: "unique-conversation-id",  // Automatically generated by Firestore
  participants: [
    {
      userId: "participant-user-id",
      permissions: {  // Default participant permissions
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
  ],    // Array of participants with permissions
  type: "direct" || "group" || "channel",    // Type of conversation
  participantCount: 2,                       // Number of participants in the conversation
  conversationName: "Group Chat",            // Name of the conversation (optional)
  pinnedMessages: ["message1-id"],           // Array of pinned message IDs
  profilePhotoURL: "path/to/photo.png",      // URL or path to the conversation's profile photo (optional)
  createdAt: new Date(),                     // Timestamp when conversation was created
  updatedAt: new Date(),                     // Timestamp when conversation was last updated
  owners: ["owner-user-id"],                 // Array of owner(s) of the conversation
  admins: [
    {
      userId: "admin-user-id",                 // Admin user ID
      permissions: {                            // Permissions granted to the admin
        canAddParticipants: true,
        canRemoveParticipants: true,
        canRenameConversation: true,
        canPinMessages: true,
        canUploadProfilePhoto: true,
        canChangeParticipantPermissions: true,  // New permission for changing participant permissions
      },
    },
  ],
};

module.exports = conversationSchema;

// Example of Direct Conversation
const directConversation = {
  conversationId: "abc123",
  participants: [
    {
      userId: "user1-id",
      permissions: {
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
    {
      userId: "user2-id",
      permissions: {
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
  ],  // Two participants for a direct conversation
  type: "direct",                         // Type: direct conversation
  participantCount: 2,                    // Number of participants in this conversation
  conversationName: null,                 // Direct chats may not have a conversation name
  pinnedMessages: [],                     // No pinned messages in direct chat
  profilePhotoURL: null,                  // No profile photo for direct chats
  createdAt: "2024-01-01T12:00:00Z",
  updatedAt: "2024-01-01T12:30:00Z",
  owners: [],                            // No owners in direct chat
  admins: []                             // No admins in direct chat
};

// Example of Group Chat
const groupConversation = {
  conversationId: "group789",
  participants: [
    {
      userId: "user1-id",
      permissions: {
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
    {
      userId: "user2-id",
      permissions: {
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
    {
      userId: "user3-id",
      permissions: {
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
  ],  // Multiple participants
  type: "group",                                       // Type: group chat
  participantCount: 3,                                 // Number of participants
  conversationName: "Friends Group",                   // Name of the group chat
  pinnedMessages: ["message1-id"],                     // Pinned message IDs
  profilePhotoURL: "https://example.com/path-to-photo.jpg", // URL to the profile photo
  createdAt: "2024-01-01T12:00:00Z",
  updatedAt: "2024-01-01T12:30:00Z",
  owners: ["user1-id"],                               // Owner(s) of the group
  admins: [
    {
      userId: "user2-id",
      permissions: {
        canAddParticipants: true,
        canRemoveParticipants: true,
        canRenameConversation: false,
        canPinMessages: true,
        canUploadProfilePhoto: false,
        canChangeParticipantPermissions: false,
      }
    }
  ]
};

// Example of Channel
const channelConversation = {
  conversationId: "channel456",
  participants: [
    {
      userId: "user1-id",
      permissions: {
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
    {
      userId: "user2-id",
      permissions: {
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
    {
      userId: "user3-id",
      permissions: {
        canSendMessages: true,
        canDeleteOwnMessages: true,
        canLeaveConversation: true,
      },
    },
  ],  // Multiple participants
  type: "channel",                                    // Type: channel
  participantCount: 3,                                // Number of participants
  conversationName: "General Channel",                // Name of the channel
  pinnedMessages: [],                                 // No pinned messages by default
  profilePhotoURL: "https://example.com/path-to-channel-photo.jpg", // URL to the channel profile photo
  createdAt: "2024-01-01T12:00:00Z",
  updatedAt: "2024-01-01T12:30:00Z",
  owners: ["user1-id"],                              // Owner(s) of the channel
  admins: [
    {
      userId: "user2-id",
      permissions: {
        canAddParticipants: true,
        canRemoveParticipants: false,
        canRenameConversation: false,
        canPinMessages: true,
        canUploadProfilePhoto: true,
        canChangeParticipantPermissions: true,
      }
    }
  ]
};

// Function to create a conversation document in Firestore
async function createConversation(participants, type, owners = [], admins = [], conversationName = null, profilePhotoURL = null) {
  const conversationData = {
    participants,
    type,
    participantCount: participants.length,   // Store the number of participants
    conversationName,                        // Optional conversation name
    profilePhotoURL,                         // Optional profile photo URL
    pinnedMessages: [],                      // Initialize with no pinned messages
    createdAt: new Date(),
    updatedAt: new Date(),
    owners,                                  // Owners, if any
    admins,                                  // Admins, if any (include permissions)
  };

  const newConversation = await admin.firestore().collection('conversations').add(conversationData);
  return newConversation.id;
}

module.exports = { conversationSchema, createConversation };